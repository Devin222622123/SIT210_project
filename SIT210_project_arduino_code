#include <DHT.h>
#include <Wire.h>
#include <BH1750.h>
#include <WiFiNINA.h>
#include <PubSubClient.h>

// DHT11 setup
#define DHTPIN 4
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// BH1750 setup
BH1750 lightMeter;

// WiFi and MQTT setup
const char* ssid = "said_name";
const char* password = "ssid_password";
const char* mqtt_server = "broker.hivemq.com";
WiFiClient espClient;
PubSubClient client(espClient);

// LED pins (alternatively can change depend on pin selection)
const int greenLED = 2;  
const int redLED = 3;

// MQTT topic
const char* mqtt_topic = "sensor/data";

void setup() {
  Serial.begin(9600);
  dht.begin();
  Wire.begin();
  lightMeter.begin();

  pinMode(greenLED, OUTPUT);
  pinMode(redLED, OUTPUT);

  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  // Handle messages received
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ArduinoClient")) {
      Serial.println("connected");
      client.subscribe(mqtt_topic);
    } else {
      Serial.print("failed,");
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  uint16_t lux = lightMeter.readLightLevel();
  
  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Sensor thresholds
  float tempThreshold = 30.0;
  float humidityThreshold = 55.0;
  uint16_t lightThreshold = 200;

  String ledStatus = "Green"; 

  if (t <= tempThreshold && h <= humidityThreshold && lux >= lightThreshold) {
    digitalWrite(greenLED, LOW);
    digitalWrite(redLED, HIGH);
    ledStatus = "Red";
  } else {
    digitalWrite(greenLED, HIGH);
    digitalWrite(redLED, LOW);
    ledStatus = "Green";
  }

  // Prepare JSON payload
  char payload[100];
  snprintf(payload, sizeof(payload), "{\"temperature\":%.2f,\"humidity\":%.2f,\"light\":%d,\"led_status\":\"%s\"}", t, h, lux, ledStatus.c_str());
  
  client.publish(mqtt_topic, payload);
  
  Serial.print("Published data: ");
  Serial.println(payload);
  
  delay(5000);
} 

